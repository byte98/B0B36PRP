#ifndef __QUEUE_C__
#define __QUEUE_C__

#include "queue.h"

#include "queue.log.h"

queue_t* create_queue(int capacity)
{
	queue_t *reti;
	reti->data = malloc(capacity * sizeof(void *));
	reti->head = 0;
	reti->index = 0;
	reti->tail = 0;
	reti->length = capacity;
	reti->stored = 0;
	for (int i = 0; i < capacity; i++)
	{
		reti->data[i] = NULL;
	}

	printQueue(reti);
	return reti;
}

/* deletes the queue and all allocated memory */
void delete_queue(queue_t *queue)
{
	free(queue->data);
	free(queue);
}

/*
* inserts a reference to the element into the queue	
* returns: true on success; false otherwise
*/
bool push_to_queue(queue_t *queue, void *data)
{
	if (queue->index == queue->length)
	{

	}
	else
	{
		queue->data[(int)queue->index] = data;
		queue->index += 1;
		printQueue(queue);
		return true;
	}
}

/*
* gets the first element from the queue and removes it from the queue
* returns: the first element on success; NULL otherwise
*/
void* pop_from_queue(queue_t *queue)
{

}

/*
* gets idx-th element from the queue
* returns the element that will be popped after idx calls of the pop_from_queue()
* returns: the idx-th element on success; NULL otherwise
*/
void* get_from_queue(queue_t *queue, int idx)
{

}

/* gets number of stored elements */
int get_queue_size(queue_t *queue)
{

}
#endif // !__QUEUE_C__